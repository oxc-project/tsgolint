// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package no_floating_promises

import "encoding/json"
import "fmt"

// Describes specific types or values declared in local files.
type FileSpecifier struct {
	// From corresponds to the JSON schema field "from".
	From string `json:"from"`

	// The name(s) of the type or value to match
	Name interface{} `json:"name"`

	// Optional file path to specify where the types or values must be declared. If
	// omitted, all files will be matched.
	Path *string `json:"path,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FileSpecifier) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["from"]; raw != nil && !ok {
		return fmt.Errorf("field from in FileSpecifier: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in FileSpecifier: required")
	}
	type Plain FileSpecifier
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = FileSpecifier(plain)
	return nil
}

// Describes specific types or values declared in TypeScript's built-in lib.*.d.ts
// types.
type LibSpecifier struct {
	// From corresponds to the JSON schema field "from".
	From string `json:"from"`

	// The name(s) of the lib type or value to match
	Name interface{} `json:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LibSpecifier) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["from"]; raw != nil && !ok {
		return fmt.Errorf("field from in LibSpecifier: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in LibSpecifier: required")
	}
	type Plain LibSpecifier
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = LibSpecifier(plain)
	return nil
}

type NoFloatingPromisesOptions struct {
	// AllowForKnownSafePromises corresponds to the JSON schema field
	// "AllowForKnownSafePromises".
	AllowForKnownSafePromises []NoFloatingPromisesOptionsAllowForKnownSafePromisesElem `json:"AllowForKnownSafePromises,omitempty"`

	// AllowForKnownSafeCalls corresponds to the JSON schema field
	// "allowForKnownSafeCalls".
	AllowForKnownSafeCalls []NoFloatingPromisesOptionsAllowForKnownSafeCallsElem `json:"allowForKnownSafeCalls,omitempty"`

	// CheckThenables corresponds to the JSON schema field "checkThenables".
	CheckThenables bool `json:"checkThenables,omitempty"`

	// IgnoreIIFE corresponds to the JSON schema field "ignoreIIFE".
	IgnoreIIFE bool `json:"ignoreIIFE,omitempty"`

	// IgnoreVoid corresponds to the JSON schema field "ignoreVoid".
	IgnoreVoid bool `json:"ignoreVoid,omitempty"`
}

type NoFloatingPromisesOptionsAllowForKnownSafeCallsElem interface{}

type NoFloatingPromisesOptionsAllowForKnownSafePromisesElem interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NoFloatingPromisesOptions) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain NoFloatingPromisesOptions
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["AllowForKnownSafePromises"]; !ok || v == nil {
		plain.AllowForKnownSafePromises = []NoFloatingPromisesOptionsAllowForKnownSafePromisesElem{}
	}
	if v, ok := raw["allowForKnownSafeCalls"]; !ok || v == nil {
		plain.AllowForKnownSafeCalls = []NoFloatingPromisesOptionsAllowForKnownSafeCallsElem{}
	}
	if v, ok := raw["checkThenables"]; !ok || v == nil {
		plain.CheckThenables = false
	}
	if v, ok := raw["ignoreIIFE"]; !ok || v == nil {
		plain.IgnoreIIFE = false
	}
	if v, ok := raw["ignoreVoid"]; !ok || v == nil {
		plain.IgnoreVoid = true
	}
	*j = NoFloatingPromisesOptions(plain)
	return nil
}

// Describes specific types or values imported from packages.
type PackageSpecifier struct {
	// From corresponds to the JSON schema field "from".
	From string `json:"from"`

	// The name(s) of the type or value to match
	Name interface{} `json:"name"`

	// The package name to match
	Package string `json:"package"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PackageSpecifier) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["from"]; raw != nil && !ok {
		return fmt.Errorf("field from in PackageSpecifier: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in PackageSpecifier: required")
	}
	if _, ok := raw["package"]; raw != nil && !ok {
		return fmt.Errorf("field package in PackageSpecifier: required")
	}
	type Plain PackageSpecifier
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PackageSpecifier(plain)
	return nil
}

type TypeOrValueSpecifier interface{}
