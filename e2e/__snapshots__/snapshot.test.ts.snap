// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TSGoLint E2E Snapshot Tests > should correctly evaluate project references 1`] = `[]`;

exports[`TSGoLint E2E Snapshot Tests > should correctly lint files not inside a project 1`] = `
[
  {
    "file_path": "fixtures/with-unmatched-files/src/index.ts",
    "message": {
      "description": "Unsafe argument of type any assigned to a parameter of type string.",
      "id": "unsafeArgument",
    },
    "range": {
      "end": 45,
      "pos": 36,
    },
    "rule": "no-unsafe-argument",
  },
  {
    "file_path": "fixtures/with-unmatched-files/test.ts",
    "message": {
      "description": "Unsafe argument of type any assigned to a parameter of type string.",
      "id": "unsafeArgument",
    },
    "range": {
      "end": 45,
      "pos": 36,
    },
    "rule": "no-unsafe-argument",
  },
]
`;

exports[`TSGoLint E2E Snapshot Tests > should generate consistent diagnostics snapshot 1`] = `
[
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
      "id": "await",
    },
    "range": {
      "end": 63,
      "pos": 55,
    },
    "rule": "await-thenable",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 60,
              "pos": 55,
            },
            "text": "",
          },
        ],
        "message": {
          "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
          "id": "await",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
      "id": "await",
    },
    "range": {
      "end": 123,
      "pos": 106,
    },
    "rule": "await-thenable",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 111,
              "pos": 106,
            },
            "text": "",
          },
        ],
        "message": {
          "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
          "id": "await",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
      "id": "await",
    },
    "range": {
      "end": 278,
      "pos": 262,
    },
    "rule": "await-thenable",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 267,
              "pos": 262,
            },
            "text": "",
          },
        ],
        "message": {
          "description": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
          "id": "await",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 70,
      "pos": 65,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/await-thenable/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 137,
      "pos": 133,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-array-delete/index.ts",
    "message": {
      "description": "Using the \`delete\` operator with an array expression is unsafe.",
      "id": "noArrayDelete",
    },
    "range": {
      "end": 98,
      "pos": 85,
    },
    "rule": "no-array-delete",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 91,
              "pos": 85,
            },
            "text": "",
          },
          {
            "range": {
              "end": 96,
              "pos": 95,
            },
            "text": ".splice(",
          },
          {
            "range": {
              "end": 98,
              "pos": 97,
            },
            "text": ", 1)",
          },
        ],
        "message": {
          "description": "Using the \`delete\` operator with an array expression is unsafe.",
          "id": "noArrayDelete",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-array-delete/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-base-to-string/index.ts",
    "message": {
      "description": "'// Examples of incorrect code for no-base-to-string rule

// These will evaluate to '[object Object]'
({})' will use Object's default stringification format ('[object Object]') when stringified.",
      "id": "baseToString",
    },
    "range": {
      "end": 106,
      "pos": 102,
    },
    "rule": "no-base-to-string",
  },
  {
    "file_path": "fixtures/basic/rules/no-base-to-string/index.ts",
    "message": {
      "description": "'
({foo: 'bar'})' will use Object's default stringification format ('[object Object]') when stringified.",
      "id": "baseToString",
    },
    "range": {
      "end": 133,
      "pos": 119,
    },
    "rule": "no-base-to-string",
  },
  {
    "file_path": "fixtures/basic/rules/no-base-to-string/index.ts",
    "message": {
      "description": "'
({foo: 'bar'})' will use Object's default stringification format ('[object Object]') when stringified.",
      "id": "baseToString",
    },
    "range": {
      "end": 160,
      "pos": 146,
    },
    "rule": "no-base-to-string",
  },
  {
    "file_path": "fixtures/basic/rules/no-base-to-string/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-confusing-void-expression/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "fixes": [
      {
        "range": {
          "end": 90,
          "pos": 87,
        },
        "text": "",
      },
      {
        "range": {
          "end": 86,
          "pos": 85,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "Union type constituent is duplicated with  'A'.",
      "id": "duplicate",
    },
    "range": {
      "end": 90,
      "pos": 87,
    },
    "rule": "no-duplicate-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "fixes": [
      {
        "range": {
          "end": 215,
          "pos": 210,
        },
        "text": "",
      },
      {
        "range": {
          "end": 209,
          "pos": 208,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "Union type constituent is duplicated with  'foo'.",
      "id": "duplicate",
    },
    "range": {
      "end": 215,
      "pos": 210,
    },
    "rule": "no-duplicate-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "message": {
      "description": "'A' is an 'error' type that acts as 'any' and overrides all other types in this union type.",
      "id": "errorTypeOverrides",
    },
    "range": {
      "end": 104,
      "pos": 103,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "message": {
      "description": "'A' is an 'error' type that acts as 'any' and overrides all other types in this union type.",
      "id": "errorTypeOverrides",
    },
    "range": {
      "end": 108,
      "pos": 107,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "message": {
      "description": "'B' is an 'error' type that acts as 'any' and overrides all other types in this union type.",
      "id": "errorTypeOverrides",
    },
    "range": {
      "end": 112,
      "pos": 111,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-duplicate-type-constituents/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "fixes": [
      {
        "range": {
          "end": 49,
          "pos": 49,
        },
        "text": "{ ",
      },
      {
        "range": {
          "end": 66,
          "pos": 66,
        },
        "text": "; }",
      },
    ],
    "message": {
      "description": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      "id": "invalidVoidExprArrow",
    },
    "range": {
      "end": 66,
      "pos": 50,
    },
    "rule": "no-confusing-void-expression",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 77,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 166,
      "pos": 134,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 200,
      "pos": 168,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 236,
      "pos": 202,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "An array of Promises may be unintentional.",
      "help": "Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
      "id": "floatingPromiseArrayVoid",
    },
    "range": {
      "end": 272,
      "pos": 238,
    },
    "rule": "no-floating-promises",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 191,
      "pos": 168,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 225,
      "pos": 202,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 132,
      "pos": 79,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/rules/no-floating-promises/index.ts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 270,
      "pos": 252,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/rules/no-for-in-array/index.ts",
    "message": {
      "description": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
      "id": "forInViolation",
    },
    "range": {
      "end": 100,
      "pos": 80,
    },
    "rule": "no-for-in-array",
  },
  {
    "file_path": "fixtures/basic/rules/no-for-in-array/index.ts",
    "message": {
      "description": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
      "id": "forInViolation",
    },
    "range": {
      "end": 149,
      "pos": 129,
    },
    "rule": "no-for-in-array",
  },
  {
    "file_path": "fixtures/basic/rules/no-for-in-array/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Consider passing a function.",
      "id": "noImpliedEvalError",
    },
    "range": {
      "end": 82,
      "pos": 67,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Consider passing a function.",
      "id": "noImpliedEvalError",
    },
    "range": {
      "end": 118,
      "pos": 103,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Consider passing a function.",
      "id": "noImpliedEvalError",
    },
    "range": {
      "end": 154,
      "pos": 140,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Consider passing a function.",
      "id": "noImpliedEvalError",
    },
    "range": {
      "end": 187,
      "pos": 176,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Consider passing a function.",
      "id": "noImpliedEvalError",
    },
    "range": {
      "end": 225,
      "pos": 214,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "Implied eval. Do not use the Function constructor to create functions.",
      "id": "noFunctionConstructor",
    },
    "range": {
      "end": 282,
      "pos": 244,
    },
    "rule": "no-implied-eval",
  },
  {
    "file_path": "fixtures/basic/rules/no-implied-eval/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-meaningless-void-operator/index.ts",
    "fixes": [
      {
        "range": {
          "end": 165,
          "pos": 161,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "void operator shouldn't be used on undefined; it should convey that a return value is being ignored",
      "id": "meaninglessVoidOperator",
    },
    "range": {
      "end": 175,
      "pos": 161,
    },
    "rule": "no-meaningless-void-operator",
  },
  {
    "file_path": "fixtures/basic/rules/no-meaningless-void-operator/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "Expected a non-Promise value to be spread in an object.",
      "id": "spread",
    },
    "range": {
      "end": 74,
      "pos": 67,
    },
    "rule": "no-misused-promises",
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
      "id": "noPromiseSpreadInObject",
    },
    "range": {
      "end": 74,
      "pos": 64,
    },
    "rule": "no-misused-spread",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 67,
              "pos": 67,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
          "id": "noPromiseSpreadInObject",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
      "id": "noFunctionSpreadInObject",
    },
    "range": {
      "end": 172,
      "pos": 160,
    },
    "rule": "no-misused-spread",
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?",
      "id": "noMapSpreadInObject",
    },
    "range": {
      "end": 243,
      "pos": 237,
    },
    "rule": "no-misused-spread",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 236,
              "pos": 235,
            },
            "text": "",
          },
          {
            "range": {
              "end": 240,
              "pos": 237,
            },
            "text": "Object.fromEntries(",
          },
          {
            "range": {
              "end": 243,
              "pos": 243,
            },
            "text": ")",
          },
          {
            "range": {
              "end": 245,
              "pos": 244,
            },
            "text": "",
          },
        ],
        "message": {
          "description": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?",
          "id": "noMapSpreadInObject",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "Using the spread operator on a string can mishandle special characters, as can \`.split("")\`.
'- \`...\` produces Unicode code points, which will decompose complex emojis into individual emojis- .split("") produces UTF-16 code units, which breaks rich characters in many languagesConsider using \`Intl.Segmenter\` for locale-aware string decomposition.Otherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
      "id": "noStringSpread",
    },
    "range": {
      "end": 311,
      "pos": 300,
    },
    "rule": "no-misused-spread",
  },
  {
    "file_path": "fixtures/basic/rules/no-misused-spread/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-mixed-enums/index.ts",
    "message": {
      "description": "Mixing number and string enums can be confusing.",
      "id": "mixed",
    },
    "range": {
      "end": 100,
      "pos": 92,
    },
    "rule": "no-mixed-enums",
  },
  {
    "file_path": "fixtures/basic/rules/no-mixed-enums/index.ts",
    "message": {
      "description": "Mixing number and string enums can be confusing.",
      "id": "mixed",
    },
    "range": {
      "end": 145,
      "pos": 144,
    },
    "rule": "no-mixed-enums",
  },
  {
    "file_path": "fixtures/basic/rules/no-mixed-enums/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-redundant-type-constituents/index.ts",
    "message": {
      "description": "'unknown' overrides all other types in this union type.",
      "id": "overrides",
    },
    "range": {
      "end": 131,
      "pos": 124,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-redundant-type-constituents/index.ts",
    "message": {
      "description": "'any' overrides all other types in this union type.",
      "id": "overrides",
    },
    "range": {
      "end": 186,
      "pos": 183,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-redundant-type-constituents/index.ts",
    "message": {
      "description": "'never' is overridden by other types in this union type.",
      "id": "overridden",
    },
    "range": {
      "end": 245,
      "pos": 240,
    },
    "rule": "no-redundant-type-constituents",
  },
  {
    "file_path": "fixtures/basic/rules/no-redundant-type-constituents/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-boolean-literal-compare/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-boolean-literal-compare/index.ts",
    "fixes": [
      {
        "range": {
          "end": 144,
          "pos": 122,
        },
        "text": "someCondition",
      },
    ],
    "message": {
      "description": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
      "id": "direct",
    },
    "range": {
      "end": 144,
      "pos": 122,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-boolean-literal-compare/index.ts",
    "fixes": [
      {
        "range": {
          "end": 187,
          "pos": 164,
        },
        "text": "someCondition",
      },
      {
        "range": {
          "end": 164,
          "pos": 164,
        },
        "text": "!",
      },
    ],
    "message": {
      "description": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
      "id": "direct",
    },
    "range": {
      "end": 187,
      "pos": 164,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-template-expression/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-template-expression/index.ts",
    "message": {
      "description": "Template literal expression is unnecessary and can be simplified.",
      "id": "noUnnecessaryTemplateExpression",
    },
    "range": {
      "end": 212,
      "pos": 202,
    },
    "rule": "no-unnecessary-template-expression",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-template-expression/index.ts",
    "message": {
      "description": "Template literal expression is unnecessary and can be simplified.",
      "id": "noUnnecessaryTemplateExpression",
    },
    "range": {
      "end": 223,
      "pos": 213,
    },
    "rule": "no-unnecessary-template-expression",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-arguments/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-arguments/index.ts",
    "fixes": [
      {
        "range": {
          "end": 214,
          "pos": 206,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This is the default value for this type parameter, so it can be omitted.",
      "id": "unnecessaryTypeParameter",
    },
    "range": {
      "end": 213,
      "pos": 207,
    },
    "rule": "no-unnecessary-type-arguments",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-assertion/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-assertion/index.ts",
    "fixes": [
      {
        "range": {
          "end": 123,
          "pos": 121,
        },
        "text": "",
      },
      {
        "range": {
          "end": 130,
          "pos": 124,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 130,
      "pos": 117,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-assertion/index.ts",
    "fixes": [
      {
        "range": {
          "end": 251,
          "pos": 249,
        },
        "text": "",
      },
      {
        "range": {
          "end": 258,
          "pos": 252,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 258,
      "pos": 237,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unnecessary-type-assertion/index.ts",
    "fixes": [
      {
        "range": {
          "end": 356,
          "pos": 354,
        },
        "text": "",
      },
      {
        "range": {
          "end": 359,
          "pos": 357,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 359,
      "pos": 350,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-argument/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-argument/index.ts",
    "message": {
      "description": "Unsafe argument of type any assigned to a parameter of type string.",
      "id": "unsafeArgument",
    },
    "range": {
      "end": 181,
      "pos": 173,
    },
    "rule": "no-unsafe-argument",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-argument/index.ts",
    "message": {
      "description": "Unsafe argument of type any assigned to a parameter of type number.",
      "id": "unsafeArgument",
    },
    "range": {
      "end": 281,
      "pos": 273,
    },
    "rule": "no-unsafe-argument",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-assignment/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-assignment/index.ts",
    "fixes": [
      {
        "range": {
          "end": 231,
          "pos": 229,
        },
        "text": "",
      },
      {
        "range": {
          "end": 235,
          "pos": 232,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 235,
      "pos": 220,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-assignment/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 119,
      "pos": 97,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-assignment/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 174,
      "pos": 160,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-assignment/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 235,
      "pos": 214,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 180,
      "pos": 154,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 93,
      "pos": 85,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 121,
      "pos": 113,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 171,
      "pos": 163,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 230,
      "pos": 222,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 237,
      "pos": 222,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 245,
      "pos": 222,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe member access .then on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 237,
      "pos": 233,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-call/index.ts",
    "message": {
      "description": "Unsafe member access .catch on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 245,
      "pos": 240,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-enum-comparison/index.ts",
    "message": {
      "description": "Mixing number and string enums can be confusing.",
      "id": "mixed",
    },
    "range": {
      "end": 95,
      "pos": 89,
    },
    "rule": "no-mixed-enums",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-enum-comparison/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 266,
      "pos": 240,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 264,
      "pos": 249,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe member access .foo on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 106,
      "pos": 103,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe member access .bar on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 145,
      "pos": 142,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe member access ['key'] on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 197,
      "pos": 192,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-member-access/index.ts",
    "message": {
      "description": "Unsafe member access .method on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 264,
      "pos": 258,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-return/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-return/index.ts",
    "message": {
      "description": "Unsafe return of a value of type \`any\`.",
      "id": "unsafeReturn",
    },
    "range": {
      "end": 136,
      "pos": 120,
    },
    "rule": "no-unsafe-return",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-return/index.ts",
    "message": {
      "description": "Unsafe return of a value of type \`any\`.",
      "id": "unsafeReturn",
    },
    "range": {
      "end": 197,
      "pos": 189,
    },
    "rule": "no-unsafe-return",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-return/index.ts",
    "message": {
      "description": "Unsafe return of a value of type \`any\`.",
      "id": "unsafeReturn",
    },
    "range": {
      "end": 291,
      "pos": 275,
    },
    "rule": "no-unsafe-return",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 120,
      "pos": 102,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 289,
      "pos": 265,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe member access .someProperty on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 332,
      "pos": 320,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe return of a value of type \`any\`.",
      "id": "unsafeReturn",
    },
    "range": {
      "end": 333,
      "pos": 303,
    },
    "rule": "no-unsafe-return",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assertion to \`any\` detected: consider using a more specific type to ensure safety.",
      "id": "unsafeToAnyTypeAssertion",
    },
    "range": {
      "end": 120,
      "pos": 108,
    },
    "rule": "no-unsafe-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assertion to \`any\` detected: consider using a more specific type to ensure safety.",
      "id": "unsafeToAnyTypeAssertion",
    },
    "range": {
      "end": 172,
      "pos": 160,
    },
    "rule": "no-unsafe-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assertion from \`any\` detected: consider using type guards or a safer assertion.",
      "id": "unsafeOfAnyTypeAssertion",
    },
    "range": {
      "end": 182,
      "pos": 160,
    },
    "rule": "no-unsafe-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-type-assertion/index.ts",
    "message": {
      "description": "Unsafe assertion to \`any\` detected: consider using a more specific type to ensure safety.",
      "id": "unsafeToAnyTypeAssertion",
    },
    "range": {
      "end": 289,
      "pos": 277,
    },
    "rule": "no-unsafe-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-unary-minus/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-unary-minus/index.ts",
    "message": {
      "description": "Argument of unary negation should be assignable to number | bigint but is unknown instead.",
      "id": "unaryMinus",
    },
    "range": {
      "end": 110,
      "pos": 104,
    },
    "rule": "no-unsafe-unary-minus",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-unary-minus/index.ts",
    "message": {
      "description": "Argument of unary negation should be assignable to number | bigint but is string instead.",
      "id": "unaryMinus",
    },
    "range": {
      "end": 177,
      "pos": 173,
    },
    "rule": "no-unsafe-unary-minus",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-unary-minus/index.ts",
    "message": {
      "description": "Argument of unary negation should be assignable to number | bigint but is false instead.",
      "id": "unaryMinus",
    },
    "range": {
      "end": 250,
      "pos": 245,
    },
    "rule": "no-unsafe-unary-minus",
  },
  {
    "file_path": "fixtures/basic/rules/no-unsafe-unary-minus/index.ts",
    "message": {
      "description": "Argument of unary negation should be assignable to number | bigint but is { prop: any; } instead.",
      "id": "unaryMinus",
    },
    "range": {
      "end": 321,
      "pos": 317,
    },
    "rule": "no-unsafe-unary-minus",
  },
  {
    "file_path": "fixtures/basic/rules/non-nullable-type-assertion-style/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/non-nullable-type-assertion-style/index.ts",
    "fixes": [
      {
        "range": {
          "end": 269,
          "pos": 267,
        },
        "text": "",
      },
      {
        "range": {
          "end": 276,
          "pos": 270,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 276,
      "pos": 261,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/non-nullable-type-assertion-style/index.ts",
    "message": {
      "description": "Unsafe type assertion: type 'string' is more narrow than the original type.",
      "id": "unsafeTypeAssertion",
    },
    "range": {
      "end": 201,
      "pos": 186,
    },
    "rule": "no-unsafe-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "Expected an error object to be thrown.",
      "id": "object",
    },
    "range": {
      "end": 70,
      "pos": 63,
    },
    "rule": "only-throw-error",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "Expected an error object to be thrown.",
      "id": "object",
    },
    "range": {
      "end": 100,
      "pos": 98,
    },
    "rule": "only-throw-error",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "Expected an error object to be thrown.",
      "id": "object",
    },
    "range": {
      "end": 132,
      "pos": 128,
    },
    "rule": "only-throw-error",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "Expected an error object to be thrown.",
      "id": "object",
    },
    "range": {
      "end": 181,
      "pos": 161,
    },
    "rule": "only-throw-error",
  },
  {
    "file_path": "fixtures/basic/rules/only-throw-error/index.ts",
    "message": {
      "description": "Expected an error object to be thrown.",
      "id": "object",
    },
    "range": {
      "end": 219,
      "pos": 215,
    },
    "rule": "only-throw-error",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 93,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 139,
      "pos": 120,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 120,
              "pos": 120,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 120,
              "pos": 120,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 187,
      "pos": 166,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 166,
              "pos": 166,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 166,
              "pos": 166,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 252,
      "pos": 215,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 215,
              "pos": 215,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 215,
              "pos": 215,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 306,
      "pos": 285,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 285,
              "pos": 285,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 285,
              "pos": 285,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 92,
      "pos": 69,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 138,
      "pos": 120,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 186,
      "pos": 166,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 251,
      "pos": 215,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-promise-reject-errors/index.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 305,
      "pos": 285,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-reduce-type-parameter/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-reduce-type-parameter/index.ts",
    "fixes": [
      {
        "range": {
          "end": 176,
          "pos": 174,
        },
        "text": "",
      },
      {
        "range": {
          "end": 183,
          "pos": 177,
        },
        "text": "",
      },
    ],
    "message": {
      "description": "This assertion is unnecessary since it does not change the type of the expression.",
      "id": "unnecessaryAssertion",
    },
    "range": {
      "end": 183,
      "pos": 131,
    },
    "rule": "no-unnecessary-type-assertion",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-reduce-type-parameter/index.ts",
    "fixes": [
      {
        "range": {
          "end": 344,
          "pos": 332,
        },
        "text": "",
      },
      {
        "range": {
          "end": 256,
          "pos": 256,
        },
        "text": "< string[]>",
      },
    ],
    "message": {
      "description": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value.",
      "id": "preferTypeParameter",
    },
    "range": {
      "end": 344,
      "pos": 330,
    },
    "rule": "prefer-reduce-type-parameter",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-return-this-type/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/prefer-return-this-type/index.ts",
    "fixes": [
      {
        "range": {
          "end": 145,
          "pos": 138,
        },
        "text": "this",
      },
    ],
    "message": {
      "description": "Use \`this\` type instead.",
      "id": "useThisType",
    },
    "range": {
      "end": 145,
      "pos": 138,
    },
    "rule": "prefer-return-this-type",
  },
  {
    "file_path": "fixtures/basic/rules/promise-function-async/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/promise-function-async/index.ts",
    "fixes": [
      {
        "range": {
          "end": 107,
          "pos": 107,
        },
        "text": " async ",
      },
    ],
    "message": {
      "description": "Functions that return promises must be async.",
      "id": "missingAsync",
    },
    "range": {
      "end": 201,
      "pos": 107,
    },
    "rule": "promise-function-async",
  },
  {
    "file_path": "fixtures/basic/rules/promise-function-async/index.ts",
    "fixes": [
      {
        "range": {
          "end": 180,
          "pos": 180,
        },
        "text": " async ",
      },
    ],
    "message": {
      "description": "Functions that return promises must be async.",
      "id": "missingAsync",
    },
    "range": {
      "end": 197,
      "pos": 180,
    },
    "rule": "promise-function-async",
  },
  {
    "file_path": "fixtures/basic/rules/promise-function-async/index.ts",
    "fixes": [
      {
        "range": {
          "end": 267,
          "pos": 267,
        },
        "text": " async ",
      },
    ],
    "message": {
      "description": "Functions that return promises must be async.",
      "id": "missingAsync",
    },
    "range": {
      "end": 351,
      "pos": 267,
    },
    "rule": "promise-function-async",
  },
  {
    "file_path": "fixtures/basic/rules/promise-function-async/index.ts",
    "fixes": [
      {
        "range": {
          "end": 328,
          "pos": 328,
        },
        "text": " async ",
      },
    ],
    "message": {
      "description": "Functions that return promises must be async.",
      "id": "missingAsync",
    },
    "range": {
      "end": 345,
      "pos": 328,
    },
    "rule": "promise-function-async",
  },
  {
    "file_path": "fixtures/basic/rules/related-getter-setter-pairs/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/related-getter-setter-pairs/index.ts",
    "message": {
      "description": "\`get()\` type should be assignable to its equivalent \`set()\` type.",
      "id": "mismatch",
    },
    "range": {
      "end": 185,
      "pos": 179,
    },
    "rule": "related-getter-setter-pairs",
  },
  {
    "file_path": "fixtures/basic/rules/require-array-sort-compare/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/require-array-sort-compare/index.ts",
    "message": {
      "description": "Require 'compare' argument.",
      "id": "requireCompare",
    },
    "range": {
      "end": 114,
      "pos": 100,
    },
    "rule": "require-array-sort-compare",
  },
  {
    "file_path": "fixtures/basic/rules/require-array-sort-compare/index.ts",
    "message": {
      "description": "Require 'compare' argument.",
      "id": "requireCompare",
    },
    "range": {
      "end": 281,
      "pos": 265,
    },
    "rule": "require-array-sort-compare",
  },
  {
    "file_path": "fixtures/basic/rules/require-await/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/require-await/index.ts",
    "message": {
      "description": "Unsafe call of a(n) \`any\` typed value.",
      "id": "unsafeCall",
    },
    "range": {
      "end": 240,
      "pos": 228,
    },
    "rule": "no-unsafe-call",
  },
  {
    "file_path": "fixtures/basic/rules/require-await/index.ts",
    "message": {
      "description": "Unsafe member access .map on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 240,
      "pos": 237,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/require-await/index.ts",
    "message": {
      "description": "Unsafe return of a value of type \`any\`.",
      "id": "unsafeReturn",
    },
    "range": {
      "end": 253,
      "pos": 221,
    },
    "rule": "no-unsafe-return",
  },
  {
    "file_path": "fixtures/basic/rules/require-await/index.ts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 255,
      "pos": 205,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-plus-operands/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-plus-operands/index.ts",
    "message": {
      "description": "Unsafe assignment of an any value.",
      "id": "anyAssignment",
    },
    "range": {
      "end": 16,
      "pos": 4,
    },
    "rule": "no-unsafe-assignment",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-plus-operands/index.ts",
    "message": {
      "description": "Numeric '+' operations must either be both bigints or both numbers. Got \`bigint\` + \`number\`.",
      "id": "bigintAndNumber",
    },
    "range": {
      "end": 16,
      "pos": 10,
    },
    "rule": "restrict-plus-operands",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-plus-operands/index.ts",
    "message": {
      "description": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`never\`.",
      "id": "invalid",
    },
    "range": {
      "end": 57,
      "pos": 56,
    },
    "rule": "restrict-plus-operands",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "'obj' will use Object's default stringification format ('[object Object]') when stringified.",
      "id": "baseToString",
    },
    "range": {
      "end": 247,
      "pos": 244,
    },
    "rule": "no-base-to-string",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "Invalid type "{ prop: any; }" of template literal expression.",
      "id": "invalidType",
    },
    "range": {
      "end": 247,
      "pos": 244,
    },
    "rule": "restrict-template-expressions",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "Invalid type "symbol" of template literal expression.",
      "id": "invalidType",
    },
    "range": {
      "end": 319,
      "pos": 316,
    },
    "rule": "restrict-template-expressions",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "Invalid type "Function" of template literal expression.",
      "id": "invalidType",
    },
    "range": {
      "end": 400,
      "pos": 398,
    },
    "rule": "restrict-template-expressions",
  },
  {
    "file_path": "fixtures/basic/rules/restrict-template-expressions/index.ts",
    "message": {
      "description": "Invalid type "number[]" of template literal expression.",
      "id": "invalidType",
    },
    "range": {
      "end": 468,
      "pos": 465,
    },
    "rule": "restrict-template-expressions",
  },
  {
    "file_path": "fixtures/basic/rules/return-await/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/return-await/index.ts",
    "message": {
      "description": "Returning an awaited promise is required in this context.",
      "id": "requiredPromiseAwait",
    },
    "range": {
      "end": 351,
      "pos": 340,
    },
    "rule": "return-await",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 340,
              "pos": 340,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Returning an awaited promise is required in this context.",
          "id": "requiredPromiseAwait",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/return-await/index.ts",
    "message": {
      "description": "Returning an awaited promise is required in this context.",
      "id": "requiredPromiseAwait",
    },
    "range": {
      "end": 605,
      "pos": 592,
    },
    "rule": "return-await",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 592,
              "pos": 592,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Returning an awaited promise is required in this context.",
          "id": "requiredPromiseAwait",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/rules/switch-exhaustiveness-check/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/switch-exhaustiveness-check/index.ts",
    "message": {
      "description": "The case statement does not have a shared enum type with the switch predicate.",
      "id": "mismatchedCase",
    },
    "range": {
      "end": 236,
      "pos": 184,
    },
    "rule": "no-unsafe-enum-comparison",
  },
  {
    "file_path": "fixtures/basic/rules/switch-exhaustiveness-check/index.ts",
    "message": {
      "description": "The case statement does not have a shared enum type with the switch predicate.",
      "id": "mismatchedCase",
    },
    "range": {
      "end": 290,
      "pos": 241,
    },
    "rule": "no-unsafe-enum-comparison",
  },
  {
    "file_path": "fixtures/basic/rules/switch-exhaustiveness-check/index.ts",
    "message": {
      "description": "Switch is not exhaustive",
      "id": "switchIsNotExhaustive",
    },
    "range": {
      "end": 176,
      "pos": 170,
    },
    "rule": "switch-exhaustiveness-check",
  },
  {
    "file_path": "fixtures/basic/rules/unbound-method/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/unbound-method/index.ts",
    "message": {
      "description": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
      "id": "unboundWithoutThisAnnotation",
    },
    "range": {
      "end": 336,
      "pos": 328,
    },
    "rule": "unbound-method",
  },
  {
    "file_path": "fixtures/basic/rules/unbound-method/index.ts",
    "message": {
      "description": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
      "id": "unboundWithoutThisAnnotation",
    },
    "range": {
      "end": 453,
      "pos": 440,
    },
    "rule": "unbound-method",
  },
  {
    "file_path": "fixtures/basic/rules/unbound-method/index.ts",
    "message": {
      "description": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
      "id": "unboundWithoutThisAnnotation",
    },
    "range": {
      "end": 565,
      "pos": 557,
    },
    "rule": "unbound-method",
  },
  {
    "file_path": "fixtures/basic/rules/unbound-method/index.ts",
    "message": {
      "description": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
      "id": "unboundWithoutThisAnnotation",
    },
    "range": {
      "end": 655,
      "pos": 647,
    },
    "rule": "unbound-method",
  },
  {
    "file_path": "fixtures/basic/rules/use-unknown-in-catch-callback-variable/index.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/rules/use-unknown-in-catch-callback-variable/index.ts",
    "message": {
      "description": "Unsafe member access .message on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 225,
      "pos": 218,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/use-unknown-in-catch-callback-variable/index.ts",
    "message": {
      "description": "Unsafe member access .message on an \`any\` value.",
      "id": "unsafeMemberExpression",
    },
    "range": {
      "end": 506,
      "pos": 499,
    },
    "rule": "no-unsafe-member-access",
  },
  {
    "file_path": "fixtures/basic/rules/use-unknown-in-catch-callback-variable/index.ts",
    "message": {
      "description": "Prefer the safe \`: unknown\` for a \`catch\` callback variable.",
      "id": "useUnknown",
    },
    "range": {
      "end": 441,
      "pos": 431,
    },
    "rule": "use-unknown-in-catch-callback-variable",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 441,
              "pos": 438,
            },
            "text": "unknown",
          },
        ],
        "message": {
          "description": "Prefer the safe \`: unknown\` for a \`catch\` callback variable.",
          "id": "useUnknown",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "fixes": [
      {
        "range": {
          "end": 49,
          "pos": 49,
        },
        "text": "{ ",
      },
      {
        "range": {
          "end": 66,
          "pos": 66,
        },
        "text": "; }",
      },
    ],
    "message": {
      "description": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      "id": "invalidVoidExprArrow",
    },
    "range": {
      "end": 66,
      "pos": 50,
    },
    "rule": "no-confusing-void-expression",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 77,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 166,
      "pos": 134,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 200,
      "pos": 168,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 236,
      "pos": 202,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "An array of Promises may be unintentional.",
      "help": "Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
      "id": "floatingPromiseArrayVoid",
    },
    "range": {
      "end": 272,
      "pos": 238,
    },
    "rule": "no-floating-promises",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 191,
      "pos": 168,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 225,
      "pos": 202,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 132,
      "pos": 79,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/a.ts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 270,
      "pos": 252,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "fixes": [
      {
        "range": {
          "end": 49,
          "pos": 49,
        },
        "text": "{ ",
      },
      {
        "range": {
          "end": 66,
          "pos": 66,
        },
        "text": "; }",
      },
    ],
    "message": {
      "description": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      "id": "invalidVoidExprArrow",
    },
    "range": {
      "end": 66,
      "pos": 50,
    },
    "rule": "no-confusing-void-expression",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 77,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 166,
      "pos": 134,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 200,
      "pos": 168,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 236,
      "pos": 202,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "An array of Promises may be unintentional.",
      "help": "Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
      "id": "floatingPromiseArrayVoid",
    },
    "range": {
      "end": 272,
      "pos": 238,
    },
    "rule": "no-floating-promises",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 191,
      "pos": 168,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 225,
      "pos": 202,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 132,
      "pos": 79,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/b.mts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 270,
      "pos": 252,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "fixes": [
      {
        "range": {
          "end": 49,
          "pos": 49,
        },
        "text": "{ ",
      },
      {
        "range": {
          "end": 66,
          "pos": 66,
        },
        "text": "; }",
      },
    ],
    "message": {
      "description": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      "id": "invalidVoidExprArrow",
    },
    "range": {
      "end": 66,
      "pos": 50,
    },
    "rule": "no-confusing-void-expression",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 77,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 166,
      "pos": 134,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 200,
      "pos": 168,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 236,
      "pos": 202,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "An array of Promises may be unintentional.",
      "help": "Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
      "id": "floatingPromiseArrayVoid",
    },
    "range": {
      "end": 272,
      "pos": 238,
    },
    "rule": "no-floating-promises",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 191,
      "pos": 168,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 225,
      "pos": 202,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 132,
      "pos": 79,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/c.cts",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 270,
      "pos": 252,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "fixes": [
      {
        "range": {
          "end": 49,
          "pos": 49,
        },
        "text": "{ ",
      },
      {
        "range": {
          "end": 66,
          "pos": 66,
        },
        "text": "; }",
      },
    ],
    "message": {
      "description": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      "id": "invalidVoidExprArrow",
    },
    "range": {
      "end": 66,
      "pos": 50,
    },
    "rule": "no-confusing-void-expression",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 77,
      "pos": 69,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 69,
              "pos": 69,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 166,
      "pos": 134,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 134,
              "pos": 134,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 200,
      "pos": 168,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 168,
              "pos": 168,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Promises must be awaited.",
      "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
      "id": "floatingVoid",
    },
    "range": {
      "end": 236,
      "pos": 202,
    },
    "rule": "no-floating-promises",
    "suggestions": [
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "void ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
      {
        "fixes": [
          {
            "range": {
              "end": 202,
              "pos": 202,
            },
            "text": "await ",
          },
        ],
        "message": {
          "description": "Promises must be awaited.",
          "help": "The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the \`void\` operator.",
          "id": "floatingVoid",
        },
      },
    ],
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "An array of Promises may be unintentional.",
      "help": "Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
      "id": "floatingPromiseArrayVoid",
    },
    "range": {
      "end": 272,
      "pos": 238,
    },
    "rule": "no-floating-promises",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "id": "noStrictNullCheck",
    },
    "range": {
      "end": 0,
      "pos": 0,
    },
    "rule": "no-unnecessary-boolean-literal-compare",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 191,
      "pos": 168,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Expected the Promise rejection reason to be an Error.",
      "id": "rejectAnError",
    },
    "range": {
      "end": 225,
      "pos": 202,
    },
    "rule": "prefer-promise-reject-errors",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 132,
      "pos": 79,
    },
    "rule": "require-await",
  },
  {
    "file_path": "fixtures/basic/src/d.tsx",
    "message": {
      "description": "Function has no 'await' expression.",
      "id": "missingAwait",
    },
    "range": {
      "end": 270,
      "pos": 252,
    },
    "rule": "require-await",
  },
]
`;
