From 9fe53c5a371891dfb831aabe63b54e1679fd4f52 Mon Sep 17 00:00:00 2001
From: auvred <aauvred@gmail.com>
Date: Wed, 18 Jun 2025 15:24:34 +0300
Subject: [PATCH 1/2] Parallel readDirectory visitor

---
 internal/vfs/utilities.go | 104 ++++++++++++++++++++++++++++----------
 1 file changed, 76 insertions(+), 28 deletions(-)

diff --git a/internal/vfs/utilities.go b/internal/vfs/utilities.go
index d86a7f0d1..9eb2698b4 100644
--- a/internal/vfs/utilities.go
+++ b/internal/vfs/utilities.go
@@ -3,9 +3,11 @@ package vfs
 import (
 	"fmt"
 	"regexp"
+	"runtime"
 	"sort"
 	"strings"
 	"sync"
+	"sync/atomic"
 
 	"github.com/dlclark/regexp2"
 	"github.com/microsoft/typescript-go/internal/collections"
@@ -359,23 +361,71 @@ type visitor struct {
 	useCaseSensitiveFileNames bool
 	host                      FS
 	visited                   collections.Set[string]
-	results                   [][]string
+}
+
+type directoryVisitorJob struct {
+	path         string
+	absolutePath string
+	depth        *int
+}
+
+func (v *visitor) doVisitDirectory(
+	rootJobs []directoryVisitorJob,
+) []string {
+	wg := core.NewWorkGroup(false)
+	jobs := make(chan directoryVisitorJob, 2048)
+	for _, job := range rootJobs {
+		jobs <- job
+	}
+	var activeWorkers atomic.Int32
+	activeWorkers.Store(int32(len(rootJobs)))
+	res := make([][]string, runtime.GOMAXPROCS(0))
+	var visitScheduler func(job directoryVisitorJob) []string
+	visitScheduler = func(job directoryVisitorJob) []string {
+		results, newJobs := v.visitDirectory(job.path, job.absolutePath, job.depth)
+
+		if len(newJobs) > 0 {
+			activeWorkers.Add(int32(len(newJobs)))
+		}
+		workersLeft := activeWorkers.Add(-1)
+		if workersLeft == 0 {
+			close(jobs)
+		} else {
+			for _, newJob := range newJobs {
+				select {
+				case jobs <- newJob:
+				default:
+					results = append(results, visitScheduler(newJob)...)
+				}
+			}
+		}
+
+		return results
+	}
+	for i := range res {
+		wg.Queue(func() {
+			matchedFiles := []string{}
+			for job := range jobs {
+				matchedFiles = append(matchedFiles, visitScheduler(job)...)
+			}
+			res[i] = matchedFiles
+		})
+	}
+	wg.RunAndWait()
+	return core.Flatten(res)
 }
 
 func (v *visitor) visitDirectory(
 	path string,
 	absolutePath string,
 	depth *int,
-) {
-	canonicalPath := tspath.GetCanonicalFileName(absolutePath, v.useCaseSensitiveFileNames)
-	if v.visited.Has(canonicalPath) {
-		return
-	}
-	v.visited.Add(canonicalPath)
+) ([]string, []directoryVisitorJob) {
 	systemEntries := v.host.GetAccessibleEntries(absolutePath)
 	files := systemEntries.Files
 	directories := systemEntries.Directories
 
+	results := []string{}
+
 	for _, current := range files {
 		name := tspath.CombinePaths(path, current)
 		absoluteName := tspath.CombinePaths(absolutePath, current)
@@ -386,11 +436,11 @@ func (v *visitor) visitDirectory(
 			continue
 		}
 		if v.includeFileRegexes == nil {
-			(v.results)[0] = append((v.results)[0], name)
+			results = append(results, name)
 		} else {
 			includeIndex := core.FindIndex(v.includeFileRegexes, func(re *regexp2.Regexp) bool { return core.Must(re.MatchString(absoluteName)) })
 			if includeIndex != -1 {
-				(v.results)[includeIndex] = append((v.results)[includeIndex], name)
+				results = append(results, name)
 			}
 		}
 	}
@@ -398,18 +448,26 @@ func (v *visitor) visitDirectory(
 	if depth != nil {
 		newDepth := *depth - 1
 		if newDepth == 0 {
-			return
+			return results, []directoryVisitorJob{}
 		}
 		depth = &newDepth
 	}
 
+	matchedDirectories := make([]directoryVisitorJob, 0, len(directories))
+
 	for _, current := range directories {
 		name := tspath.CombinePaths(path, current)
 		absoluteName := tspath.CombinePaths(absolutePath, current)
 		if (v.includeDirectoryRegex == nil || core.Must(v.includeDirectoryRegex.MatchString(absoluteName))) && (v.excludeRegex == nil || !core.Must(v.excludeRegex.MatchString(absoluteName))) {
-			v.visitDirectory(name, absoluteName, depth)
+			matchedDirectories = append(matchedDirectories, directoryVisitorJob{
+				path:         name,
+				absolutePath: absoluteName,
+				depth:        depth,
+			})
 		}
 	}
+
+	return results, matchedDirectories
 }
 
 // path is the directory of the tsconfig.json
@@ -431,18 +489,6 @@ func matchFiles(path string, extensions []string, excludes []string, includes []
 		excludeRegex = GetRegexFromPattern(patterns.excludePattern, useCaseSensitiveFileNames)
 	}
 
-	// Associate an array of results with each include regex. This keeps results in order of the "include" order.
-	// If there are no "includes", then just put everything in results[0].
-	var results [][]string
-	if len(includeFileRegexes) > 0 {
-		tempResults := make([][]string, len(includeFileRegexes))
-		for i := range includeFileRegexes {
-			tempResults[i] = []string{}
-		}
-		results = tempResults
-	} else {
-		results = [][]string{{}}
-	}
 	v := visitor{
 		useCaseSensitiveFileNames: useCaseSensitiveFileNames,
 		host:                      host,
@@ -450,13 +496,15 @@ func matchFiles(path string, extensions []string, excludes []string, includes []
 		excludeRegex:              excludeRegex,
 		includeDirectoryRegex:     includeDirectoryRegex,
 		extensions:                extensions,
-		results:                   results,
-	}
-	for _, basePath := range patterns.basePaths {
-		v.visitDirectory(basePath, tspath.CombinePaths(currentDirectory, basePath), depth)
 	}
 
-	return core.Flatten(results)
+	return v.doVisitDirectory(core.Map(patterns.basePaths, func(basePath string) directoryVisitorJob {
+		return directoryVisitorJob{
+			path:         basePath,
+			absolutePath: tspath.CombinePaths(currentDirectory, basePath),
+			depth:        depth,
+		}
+	}))
 }
 
 func ReadDirectory(host FS, currentDir string, path string, extensions []string, excludes []string, includes []string, depth *int) []string {
-- 
2.49.0

